{
  "title": "mediawiki/api/request",
  "description": "A single request to the MediaWiki Action API (api.php)",
  "$id": "/mediawiki/api/request/1.0.0",
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "examples": [
    {
      "$schema": "/mediawiki/api/request/1.0.0",
      "meta": {
        "dt": "2020-07-01T00:00:00Z",
        "stream": "example_stream"
      },
      "database": "examplewiki"
    }
  ],
  "required": [
    "$schema",
    "meta"
  ],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "description": "A URI identifying the JSONSchema for this event. This should match an schema's $id in a schema repository. E.g. /schema/title/1.0.0\n",
      "type": "string"
    },
    "meta": {
      "type": "object",
      "required": [
        "dt",
        "stream"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri-reference",
          "maxLength": 8192,
          "description": "Unique URI identifying the event or entity"
        },
        "request_id": {
          "description": "Unique ID of the request that caused the event",
          "type": "string"
        },
        "id": {
          "description": "Unique ID of this event",
          "type": "string"
        },
        "dt": {
          "type": "string",
          "format": "date-time",
          "maxLength": 128,
          "description": "UTC event datetime, in ISO-8601 format"
        },
        "domain": {
          "description": "Domain the event or entity pertains to",
          "type": "string",
          "minLength": 1
        },
        "stream": {
          "description": "Name of the stream (dataset) that this event belongs in",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "database": {
      "description": "The name of the wiki database this event entity belongs to.",
      "type": "string",
      "minLength": 1
    },
    "performer": {
      "description": "Represents the user that performed this change.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The user id that performed this change.  This is optional, and will not be present for anonymous users.\n",
          "type": "integer"
        },
        "user_text": {
          "description": "The text representation of the user that performed this change.",
          "type": "string",
          "minLength": 1
        },
        "user_groups": {
          "description": "A list of the groups this user belongs to.  E.g. bot, sysop etc.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "user_is_bot": {
          "description": "True if this user is considered to be a bot at the time of this event. This is checked via the $user->isBot() method, which considers both user_groups and user permissions.\n",
          "type": "boolean"
        },
        "user_registration_dt": {
          "description": "The datetime of the user account registration. Not present for anonymous users or if missing in the MW database.\n",
          "type": "string",
          "format": "date-time",
          "maxLength": 128
        },
        "user_edit_count": {
          "description": "The number of edits this user has made at the time of this event. Not present for anonymous users.\n",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "http": {
      "type": "object",
      "description": "Information about the HTTP request that generated this event.",
      "properties": {
        "method": {
          "type": "string",
          "description": "The HTTP request method (GET, POST, etc.)"
        },
        "client_ip": {
          "type": "string",
          "description": "The http client's IP address"
        },
        "request_headers": {
          "type": "object",
          "description": "Request headers sent by the client.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "backend_time_ms": {
      "type": "integer",
      "description": "Elapsed milliseconds to process request as measured by MediaWiki"
    },
    "api_error_codes": {
      "type": "array",
      "description": "List of error codes for any errors encountered, e.g. 'apierror-missingparam' If this field is missing or empty, no errors were encountered.\n",
      "items": {
        "type": "string"
      }
    },
    "params": {
      "type": "object",
      "description": "Request parameters. These might come from http query string, or from the POST body. Sensitive params are redacted.\n",
      "additionalProperties": {
        "type": "string"
      }
    }
  }
}